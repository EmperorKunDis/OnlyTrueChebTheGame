package tile;import main.GamePanel;import main.UtilityTool;import javax.imageio.ImageIO;import java.awt.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;public class TileManager {    GamePanel gp;    public Tile[] tile;    public int mapTileNum[][];    public TileManager(GamePanel gp) {        this.gp = gp;        tile = new Tile[99];        mapTileNum = new int[gp.maxWorldCol][gp.maxWorldRow];        getTileImage();        loadMap("/maps/v2Map01RandomBaseGrass.txt");    }    public void getTileImage() {        System.out.println("Mapa se zacala nacitat....");        //Placeholder        //Placeholder        //Grass 10 - 29        setup( 10,"Grass/Grass01", false);        setup( 11,"Grass/Grass02", false);        setup( 12,"Grass/Grass03", false);        setup( 13,"Grass/Grass_PurpleFlower01", false);        setup( 14,"Grass/Grass_PurpleFlower02", false);        setup( 15,"Grass/Grass_PurpleFlower03", false);        setup( 16,"Grass/Grass_RedFlower01", false);        setup( 17,"Grass/Grass_RedFlower02", false);        setup( 18,"Grass/Grass_RedFlower03", false);        setup( 19,"Grass/Grass_YellowFlower01", false);        setup( 20,"Grass/Grass_YellowFlower02", false);        setup( 21,"Grass/Grass_YellowFlower03", false);            /*            setup( 22,"", true);            setup( 23,"", true);            setup( 24,"", true);            */        //Water 30-39        setup( 22,"Water/Water01", true);        setup( 23,"Water/Water02", true);        setup( 24,"Water/Water03", true);        setup( 25,"Water/Water04", true);        setup( 26,"Water/Water05", true);        setup( 27,"Water/Water06", true);        //Forest 30-59        setup( 28,"Forest/Bush01", true);        setup( 29,"Forest/Bush02", true);        setup( 30,"Forest/Bush03", true);        setup( 31,"Forest/Tree01", true);        setup( 32,"Forest/Tree02", true);        setup( 33,"Forest/Tree03", true);        setup( 34,"Forest/Tree04", true);        setup( 35,"Forest/Tree05", true);        setup( 36,"Forest/Tree06", true);        setup( 37,"Forest/Tree07", true);        setup( 38,"Forest/Tree08", true);        setup( 39,"Forest/Tree09", true);        setup( 40,"Forest/Tree10", true);        setup( 41,"Forest/MiniTree01", true);        setup( 42,"Forest/MiniTree02", true);        setup( 43,"Forest/MiniTree03", true);        setup( 44,"Forest/MiniTree04", true);        setup( 45,"Forest/MiniTree05", true);        setup( 46,"Forest/MiniTree06", true);        setup( 47,"Forest/MiniTree07", true);        setup( 48,"Forest/Bush03", true);        //setup( 49,"Forest/", true);        //Coast 50-69        setup( 50,"Coast/CoastRightBotEdge", true);        setup( 51,"Coast/CoastRightTopEdge", true);        setup( 52,"Coast/CoastLeftBotEdge", true);        setup( 53,"Coast/CoastLeftTopEdge", true);        setup( 54,"Coast/CoastDiagonalRightBot", true);        setup( 55,"Coast/CoastDiagonalRightTop", true);        setup( 56,"Coast/CoastDiagonalLeftBot", true);        setup( 57,"Coast/CoastDiagonalLeftTop", true);        setup( 58,"Coast/CoastLeftside01", true);        setup( 59,"Coast/CoastLeftside02", true);        setup( 60,"Coast/CoastLilEdgeLB", true);        setup( 61,"Coast/CoastLilEdgeLT", true);        setup( 62,"Coast/CoastRightside01", true);        setup( 63,"Coast/CoastRightside02", true);        setup( 64,"Coast/CoastLilEdgeRB", true);        setup( 65,"Coast/CoastLilEdgeRT", true);        setup( 66,"Coast/CoastFrontside01", true);        setup( 67,"Coast/CoastFrontside02", true);        setup( 68,"Coast/CoastBackside01", true);        setup( 69,"Coast/CoastBackside02", true);        //Path & Buildings 70-79        setup( 70,"Buildings&Paths/Bricks", true);        setup( 71,"Buildings&Paths/Floor", false);        setup( 72,"Buildings&Paths/Sand", false);        setup( 73,"Buildings&Paths/SandPath01", false);        setup( 74,"Buildings&Paths/SandPath02", false);        setup( 75,"Buildings&Paths/SandPath03", false);        setup( 76,"Buildings&Paths/SandPath04", false);        setup( 77,"Buildings&Paths/SandGrassPathRight", false);        setup( 78,"Buildings&Paths/SandPathRightBot", false);        setup( 79,"Buildings&Paths/SandGrassPathLeft01", false);        setup( 80,"Buildings&Paths/SandGrassPathLeft02", false);        setup( 81,"Buildings&Paths/SandGrassPathBot02", false);        setup( 82,"Buildings&Paths/SandPathLeftBot", false);        setup( 83,"Buildings&Paths/SandPathWaterLine", false);        setup( 84,"Buildings&Paths/SandGrassPathTop01", false);        setup( 85,"Buildings&Paths/SandPathRightBot", false);        setup( 86,"Buildings&Paths/SandGrassPathRightTop", false);        setup( 87,"Buildings&Paths/SandGrassPathLeftBot", false);        setup( 88,"Buildings&Paths/SandGrassPathLeftTop", false);        setup( 89,"Coast/CoastLeftside03", true);        setup( 90,"Coast/CoastLeftside04", true);        /*        setup( 91,"", true);        setup( 92,"", true);        setup( 93,"", true);        setup( 94,"", true);            setup( 95,"", true);            setup(96,"", true);            setup(97,"", true);            setup(98,"", true);            setup(99,"", true);            */    }    public void setup(int index, String imageName,boolean collision) {        UtilityTool uTool = new UtilityTool();        try {            tile[index] = new Tile();            tile[index].image = ImageIO.read(getClass().getResourceAsStream( "/resources/mapTiles/" + imageName + ".png"));            tile[index].image = uTool.scaleImage(tile[index].image, gp.tileSize, gp.tileSize);            tile[index].collision = collision;        }        catch(IOException e) {            e.printStackTrace();        }    }    public void loadMap(String filePath) {        try {            InputStream is = getClass().getResourceAsStream(filePath);            BufferedReader br = new BufferedReader(new InputStreamReader(is));            int col = 0;            int row = 0;            while(col < gp.maxWorldCol && row < gp.maxWorldRow) {                String line = br.readLine();                while(col < gp.maxWorldCol) {                    String numbers[] = line.split(" ");                    int num = Integer.parseInt(numbers[col]);                    mapTileNum[col][row] = num;                    col++;                }                if(col == gp.maxWorldCol) {                    col = 0;                    row++;                }            }            br.close();        }catch(Exception e) {            e.printStackTrace();            System.out.println("Error loading player images: " + e.getMessage());        }        System.out.println("Mapa se nacetla....");    }    public void draw(Graphics2D g2) {        int worldCol = 0;        int worldRow = 0;        while(worldCol < gp.maxWorldCol && worldRow< gp.maxWorldRow) {            int tileNum = mapTileNum[worldCol][worldRow];            int worldX = worldCol * gp.tileSize;            int worldY = worldRow * gp.tileSize;            int screenX = worldX - gp.player.worldX + gp.player.screenX;            int screenY = worldY - gp.player.worldY + gp.player.screenY;            if (worldX + gp.tileSize > gp.player.worldX - gp.player.screenX &&                    worldX - gp.tileSize < gp.player.worldX + gp.player.screenX &&                    worldY + gp.tileSize > gp.player.worldY - gp.player.screenY &&                    worldY - gp.tileSize < gp.player.worldY + gp.player.screenY ) {                g2.drawImage(tile[tileNum].image, screenX, screenY, null);            }            worldCol++;            if (worldCol == gp.maxWorldCol) {                worldCol = 0;                worldRow++;            }        }    }}